import os
import hashlib
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from datetime import datetime
import threading

class EagleScan:
    def __init__(self, master):
        self.master = master
        self.setup_window()
        self.setup_variables()
        self.create_gui()
        self.load_malware_database()
        
    def setup_window(self):
        """Configure main window"""
        self.master.title("🦅 EagleScan - Malware Scanner")
        self.master.geometry("700x500")
        self.master.configure(bg='#f0f0f0')
        
    def setup_variables(self):
        """Initialize program variables"""
        self.scanning = False
        self.selected_dir = ""
        self.files_scanned = 0
        self.total_files = 0
        
    def load_malware_database(self):
        """Load known malware signatures"""
        self.malware_db = {
            "44d88612fea8a8f36de82e1278abb02f": "EICAR Test File",
            "a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3": "Test Trojan",
            "b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4": "Test Worm"
        }
        
    def create_gui(self):
        """Create GUI elements"""
        # Style configuration
        style = ttk.Style()
        style.configure('TButton', padding=5, font=('Segoe UI', 10))
        style.configure('TLabel', font=('Segoe UI', 10))
        
        # Main frame
        main_frame = ttk.Frame(self.master, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Header
        header = ttk.Label(main_frame, 
                          text="Select a directory to scan for malware",
                          font=('Segoe UI', 12, 'bold'))
        header.pack(pady=10)
        
        # Directory selection frame
        dir_frame = ttk.Frame(main_frame)
        dir_frame.pack(fill=tk.X, pady=5)
        
        self.dir_label = ttk.Label(dir_frame, text="No directory selected")
        self.dir_label.pack(side=tk.LEFT, padx=5)
        
        self.select_btn = ttk.Button(dir_frame, text="Select Directory", 
                                   command=self.select_directory)
        self.select_btn.pack(side=tk.RIGHT)
        
        # Control frame
        control_frame = ttk.Frame(main_frame)
        control_frame.pack(fill=tk.X, pady=10)
        
        self.scan_btn = ttk.Button(control_frame, text="Start Scan", 
                                 command=self.start_scan,
                                 state=tk.DISABLED)
        self.scan_btn.pack(side=tk.LEFT)
        
        self.cancel_btn = ttk.Button(control_frame, text="Cancel", 
                                   command=self.cancel_scan,
                                   state=tk.DISABLED)
        self.cancel_btn.pack(side=tk.LEFT, padx=5)
        
        # Progress frame
        progress_frame = ttk.Frame(main_frame)
        progress_frame.pack(fill=tk.X, pady=5)
        
        self.progress = ttk.Progressbar(progress_frame, mode='determinate')
        self.progress.pack(fill=tk.X)
        
        self.status_label = ttk.Label(progress_frame, text="Ready")
        self.status_label.pack(pady=5)
        
        # Results frame
        self.results = tk.Text(main_frame, height=15, width=80, 
                             font=('Consolas', 10))
        self.results.pack(fill=tk.BOTH, expand=True, pady=5)
        self.results.tag_configure('malware', foreground='red', font=('Consolas', 10, 'bold'))
        self.results.tag_configure('clean', foreground='green')
        self.results.tag_configure('header', font=('Consolas', 10, 'bold'))
        
    def select_directory(self):
        """Handle directory selection"""
        self.selected_dir = filedialog.askdirectory()
        if self.selected_dir:
            self.dir_label.config(text=self.selected_dir)
            self.scan_btn.config(state=tk.NORMAL)
            self.results.delete(1.0, tk.END)
            
    def start_scan(self):
        """Start the scanning process in a separate thread"""
        self.scanning = True
        self.scan_btn.config(state=tk.DISABLED)
        self.cancel_btn.config(state=tk.NORMAL)
        self.progress['value'] = 0
        
        # Clear and add header to results
        self.results.delete(1.0, tk.END)
        self.log_message(f"Scan started at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n", 'header')
        
        # Start scan in separate thread
        threading.Thread(target=self.scan_directory, daemon=True).start()
        
    def scan_directory(self):
        """Perform the actual directory scan"""
        found_malware = False
        self.files_scanned = 0
        
        try:
            # Count total files first
            self.total_files = sum([len(files) for _, _, files in os.walk(self.selected_dir)])
            
            for root, _, files in os.walk(self.selected_dir):
                if not self.scanning:  # Check if scan was cancelled
                    break
                    
                for file in files:
                    if not self.scanning:
                        break
                        
                    file_path = os.path.join(root, file)
                    self.status_label.config(text=f"Scanning: {file}")
                    
                    # Calculate file hash
                    file_hash = self.get_file_hash(file_path)
                    
                    if file_hash in self.malware_db:
                        found_malware = True
                        self.log_message(
                            f"⚠️ MALWARE: {file_path}\n"
                            f"    Type: {self.malware_db[file_hash]}\n",
                            'malware'
                        )
                    else:
                        self.log_message(f"✓ Clean: {file_path}\n", 'clean')
                    
                    # Update progress
                    self.files_scanned += 1
                    self.update_progress()
            
            # Scan completion message
            if self.scanning:
                self.log_message("\n=== Scan Complete ===\n", 'header')
                self.log_message(
                    f"Total files scanned: {self.files_scanned}\n"
                    f"Malware found: {'Yes' if found_malware else 'No'}\n",
                    'malware' if found_malware else 'clean'
                )
        
        except Exception as e:
            self.log_message(f"\nError during scan: {str(e)}\n", 'malware')
        
        finally:
            self.scanning = False
            self.scan_btn.config(state=tk.NORMAL)
            self.cancel_btn.config(state=tk.DISABLED)
            self.status_label.config(text="Scan completed")
            
    def get_file_hash(self, file_path):
        """Calculate SHA256 hash of a file"""
        try:
            sha256 = hashlib.sha256()
            with open(file_path, 'rb') as f:
                while chunk := f.read(8192):  # Read in chunks
                    sha256.update(chunk)
            return sha256.hexdigest()
        except Exception as e:
            self.log_message(f"Error reading {file_path}: {str(e)}\n", 'malware')
            return None
            
    def update_progress(self):
        """Update the progress bar and status"""
        progress = (self.files_scanned / self.total_files * 100 
                   if self.total_files > 0 else 0)
        self.progress['value'] = progress
        self.master.update_idletasks()
        
    def cancel_scan(self):
        """Cancel the running scan"""
        self.scanning = False
        self.status_label.config(text="Scan cancelled")
        self.log_message("\n=== Scan Cancelled ===\n", 'header')
        
    def log_message(self, message, tag=None):
        """Add a message to the results area"""
        self.results.insert(tk.END, message, tag)
        self.results.see(tk.END)
        self.master.update_idletasks()

if __name__ == "__main__":
    root = tk.Tk()
    app = EagleScan(root)
    root.mainloop()
